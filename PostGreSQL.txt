PostGreSQL est un SGBDRO libre plus ancien que MySQL. Il avait été mis de côté fut un temps du fait qu'il ne fonctionnait pas
sous Windows mais uniquement sur les sytèmes UNIX. Ce problème a été résolu dans la version 8.

Une base PostGreSQL ne peut pas être mise en prod directement sans passer par des fichiers de configuration.
Cependant, un outil du nom de PgAdmin livré avec le programme permet une gestion des BDD simplifiée.

Avantages : 

-Respect de la norme SQL2003
-Plus de fonctionnalités que MySQL et test d'intégrité (qui par contre baisse les perf sur les volumes de données basses [en dessous de 1GO])

Il est préférable d'utiliser PostGreSQL sur les gros volumes de données.
Si on a un faible volume de données, il faut privilégier MySQL qui sera plus rapide en execution.

Anecdote : Sourceforge est passée de MySQL à PostGreSQL parce que MySQL ne pouvait plus supporter leur base devenue trop grosse et trop complexe.

Un SGBDR ne fonctionne bien que si il a accès à toutes les ressources du serveur.
Idéal : connexion lan avec serveur PHP

service serveur : postegres
service client : pgadmin, psql, serveur web, application...

Installer PostgreSQL : sudo apt-get install postgresql-10
Depuis la version 10 de psql, la migration des données d'une version majeur (à deux chiffres) à une autre est possible sans contraintes.
Là où, dans les versions antérieures, on ne pouvait pas le faire sans faire un dump au format texte.

    /var/lib/postgresql/10/main/: les fichiers des données.
    /var/log/postgresql/postgresql-10-main.log: le fichier de log du cluster.
    /etc/postgresql/10/main/: les fichiers de configuration.
    /usr/lib/postgresql/10/: fichiers binaires du serveur, exécutables et librairies.

Cela va également créer un cluster (instance de BDD) qui s'appelle "main".


Il faut dans un premier temps se connecter en tant qu'utilisateur postgres qui nous permettra d'utiliser toutes les commandes
liées à PostgreSQL (à utiliser uniquement pour l'administration).

Pour lancer l'invite de commande de PostGre, faire : psql
Pour se connecter à un serveur postgre distant : psql -h adresseIP -p port -U nom_user -d nom_bdd

A partir de là, il faut créer un rôle utilisateur pour éviter d'utiliser psql avec postegres (équivalent à root) :
CREATE USER nom_utilisateur; // créé l'utilisateur
ALTER ROLE nom_utilisateur WITH CREATEDB; // lui donne le droit de créer des bases
ALTER ROLE nom_utilisateur WITH CREATEROLE; // lui permet de créer des rôles
ALTER USER nom_utilisateur WITH ENCRYPTED PASSWORD 'mot_de_passe'; // donne un mot de passe à l'utilisateur

On peut aussi faire tout d'un coup avec une seule commande : CREATE USER nom_utilisateur WITH PASSWORD 'mdp' CREATEDB CREATEROLE;

puis, créer une base de donnée
CREATE DATABASE nom_utilisateur; // si une base de donnée porte le nom d'un utilisateur elle lui est attribué par défaut
Sinon faire : CREATE DATABASE nom_base OWNER nom_utilisateur;

ALTER DATABASE x OWNER TO y;

Se connecter en tant qu'utilisateur avec psql à la BDD que l'on souhaite.

Exemple : psql test

\q : pour quitter psql et sortir du serveur
\h : affiche une aide sql
\? : affiche une aide des commandes psql
\g : équivalent du ; en fin de requête (exécute la requête)
\l : voir les bdd disponibles
\du : voir la liste des utilisateurs

psql -l : voir les BDD disponibles
psql -c "requete;" : exécuter une reqûete en dehors du cli psql
psql -f cheminDuFichierSQL : exécute un fichier SQL

On peut aussi créer un nouveau cluster et ne plus avoir besoin de se connecter avec Postgres pour configurer tout ça (pratique
dans un environnement de dev).

sudo pg_createcluster -u nom_utilisateur -g nom_groupe --locale=fr_FR.UTF-8 -l /home/nom_utilisateur/nom_cluster.log -d home/nom_utilisateur/nom_cluster 10 nom_cluster

pg_ctlcluster 10 nom_cluster start // démarrage 
pg_ctlcluster 10 nom_cluster stop // arrêt
pg_ctlcluster 10 nom_cluster status // affiche si le serveur est on ou off
pg_ctlcluster 10 nom_cluster reload // recharge la configuration
pg_ctlcluster 10 nom_cluster restart // redémarre le serveur

pg_dropcluster --stop 10 nom_cluster //  supprime un cluster

On peut définir par défaut la base et l'utilisateur utilisé par psql avec des variables d'environnemment : PGUSER et PGDATABASE.

------------------

PGADMIN :

Installer pgadmin : sudo apt-get install pgadmin3

Ajouter un serveur : File -> Add server
	Name : nom qu'on donne au serveur
	Host : localhost (ou ip du serveur)
	Port : 5432 (par défaut)
	Base de maintenance : nom bdd
	Username : login bdd
	Password : Mdp bdd

Tout est objet dans PostgreSQL. La manipulation pour créer n'importe quel objet dans PgAdmin reste la même pour tous :
Clic droit -> "New".

Créer une BDD : Clic droit sur "Databases" -> New Database

Créer un schéma : Clic droit sur "Schemas" -> New Schema
Le schémas permettent de mieux organiser les données au sein d'une base selon des contextes. Pratique lorsqu'on a plusieurs versions.
On peut autoriser un ou plusieurs utilisateurs à utiliser un schéma.
Un schéma "public" est créé sur chaque BDD.
On peut aussi le faire avec psql : CREATE SCHEMA nom_schema AUTHORIZATION nom_user;

Créer une table : Clic droit sur "Tables" -> New table
Pour accéder à une table, il faut utiliser le nom qualifié adéquat.
Le nom qualifié se présente sous la format : nom_schema.nom_table
On peut aussi le faire avec psql : CREATE TABLE nom_schema.nom_table ( ... );

Types principaux de données des champs :

serial : entier 4 octets à incrémentation auto
integer : entier 4 octets
real : réel 4 octets précision 6 décimales
timestamp : date et heure
cidr et inet : adresse IP v4 ou v6 réseau / ordinateur
boolean : true / false
text : chaine de caractere infinie
varchar : chaine de caractere à longueur max définie
money : montant d'une devise

https://docs.postgresql.fr/10/datatype.html

Clef primaire :

Clic droit sur "Constraints" dans la table, et sélectionner la colone ID.

Ajouter des entrées :

Clic droit sur la table "View Data" -> "View 100 top rows"
Ne pas hésiter à rafraichir pour mettre à jour l'affichage pour voir les ID s'incrémenter par exemple.

On peut aussi utiliser le query tool de PgAdmin pour éxecuter des reqûetes SQL.

-------

CONNEXION SERVEUR DISTANT :

Il faut configurer deux fichiers sur la machine serveur pour autoriser la connexion d'un client à l'exterieur.
postgresql.conf : décommenter la ligne d'autorisation de connexion et remplacer localhost par *
pg_hba.conf : ajouter une ligne en fin de fichier pour autoriser tel client à se connecter à postgre

host all all IP/masque md5

On peut changer le port utilisé par postgre en l'éditant dans le fichier postgresql.conf

Sources : https://openclassrooms.com/fr/courses/1121356-mysql-et-postgresql-lequel-choisir
https://doc.ubuntu-fr.org/postgresql
https://blog.postgresql.fr/public/Doc_postgresql_9_0.pdf
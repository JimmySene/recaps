Framework TypeScript utilisé pour crééer des SPA et raccourcir drastiquement le code JS. 
Créé en 2016 par Google. Evolution de AngularJS.

=============================================================================

Avec Angular, on peut utiliser un CLI (Command Line Interface) pour générer le squelette de son application avec une simple commande.
Il faut avoir installé une version de node JS (6.9.x et supérieur) et de NPM (3.x.x et supérieur) pour pouvoir l'utiliser.


Installer Angular-cli : npm install -g @angular-cli

Créer un projet : ng new nom-projet

Se placer dans le dossier de projet et lancer le serveur en lancant la commande ng serve.
Si VM : ng serve --host 0.0.0.0 --port 4200 --open // --open (-o) ouvre un onglet dans le navigateur

Accéder à l'appli grâce au navigateur à l'adresse : IP:port

Si l'application ne change pas au gré des modifications dans le code, vérifier que le <base href=""> dans index.html est bon.

Liste de commandes de création via le CLI :

-component : ng g component nom-component
-directive : ng g directive nom-directive
-pipe : ng g pipe nom-pipe
-class : ng g class nom-class
-service : ng g service nom-service
-interface : ng g interface nom-interface
-enum : ng g enum nom-enum
-module : ng g module nom-module

Structure d'un projet :

L'appli se situe dans le dossier src du dossier de projet.

Dans le dossier app, chaque component est situé dans un dossier portant son nom. Ce dossier contient 4 fichiers :
-nom.component.html -> template HTML
-nom.component.ts -> fichier TypeScript principal
-nom.component.spec.ts -> fichier pour les tests (optionnel et peut être supprimé)
-nom.component.css -> fichier de style CSS

Il y a un component principal du nom de app directement dans le dossier.

Le dossier assets comporte toutes les ressources diverses de l'application (images, json...)

Il y a un fichier html et css principal (index.html et styles.css).

Lorsque le développement est fini et que l'on souhaite mettre l'application sur un serveur, il faut le compiler
avec la commande ng build et transférer sur le serveur l'ensemble des fichiers se situant dans le dossier "dist".
Pour avoir une version prod du projet, il faut ajouter un argument à la commande : ng build --prod
Si page blanche, alors ng build --prod --build-optimizer=false

=============================================================================

Dans Angular, tout est COMPONENT. Un component ne gère que sa vue et ses données, a son propre cycle de vie et communique
avec d'autres components uniquement via les évènements.

Déclaration d'un component : ng g c nom-component avec angular cli

import { Component } from '@angular/core';

@Component({
	selector: 'mon-premier-component',
	template: '
		<h1>Mon premier component</h1>
		// autre code HTML
	',
	styles: ['']
})

export class MonPremierComponent {
}


Infos : @angular/core est le module coeur de Angular qui contient la classe "Component" à importer à chaque création.
@Component est un décorateur, issu du langage TypeScript. Il permet de modifier une class pour la "transformer"
en web component Angular.
Il y a trois MetaDatas : 
-"selector" est le Custom Element W3C (Balise HTML 5 perso). Il y a trois façons de l"utiliser :
	-'exemple' => créer la balise <exemple></exemple>
	-'.exemple' => Créer une class css <div class="exemple"></div>
	-[exemple] => Créer un attribut html <div exemple></div>
-"template" est l'import HTML W3C (intégation de document HTML 5). Utiliser les `` pour écrire sur plusieurs lignes. 
	Utiliser "templateUrl" à la place de "template" pour renseigner une url menant vers un fichier de template.
-styles permet d'entrer le code CSS. 
	styleUrls mentionne dans un array les fichiers CSS.

"export" pour exporter le component dans toute l'application. C'est dans cette classe où l'on peut placer le code de notre application (propriétés et méthodes).

Utiliser le mot clef this pour accéder aux données du component au sein des méthodes et propriétés.

=============================================================================


Interpolation : {{ }} pour afficher des données dans un template HTML. On peut effectuer des calculs en son sein.

Property-binding : Lie des propriétés du modèle à des éléments HTML du DOM. Il est préférable d'éviter d'utiliser l'interpolation dans les attributs html car cela ne fonctionne qu'avec des string. 
Il vaut mieux mettre l'attribut html etre crochets. Ainsi il pourra être lié à une variable du modèle. Exemple : <input [disabled] = "myDisabled" /> // sachant que myDisabled est = à true ou false
Une alternative existe : bind-attribut. Exemple : <input bind-disabled = "myDisabled" /> // sachant que myDisabled est = à true ou false

Style-binding : [style.attributCSS] = "propriete" -> change le style d'un élément HTML du DOM. Exemple : <p [style.color] = "couleur">Test</p> // sachant que couleur est définie à "blue"
On peut mettre des conditions comme valeur. Exemple : <p [style.color] = "erreur ? red : green">Test</p> // sachant que erreur est définie à true ou false
Il est possible de définir plusieurs effets de styles en les mettant dans un objet et en utilisant la syntaxe 1 dans le template.

Class-bingind : [class]="propriete"
[class.nomClass]="condition" : si la condition vaut vraie alors la class de style est appliquée à l'élément HTML.

Event-binding : Evènement click (Equivalent de ng-click = "") -> (click) = ""

Input Data-binding (Equivalent de ng-model = "") (property binding + event binding) : [(ngModel)] = "" (penser à inclure le module forms dans app.module.ts)

Reference template variable : #nomVariable dans une balise HTML pour stocker l'élément HTML dans une variable que l'on peut ensuite exploiter dans le template ou dans le modèle en utilisant
son nom. Exemple : <input #myInput (click)="afficheValeur(myInput)" type="text" /> puis, on récupère l'élément myInput dans la méthode afficheValeur. Ce qui nous permet d'accéder à l'ensemble
de ses propriétés et méthodes.

Input property : Lorsque l'on veut faire passer des données d'un component à un autre, on peut utiliser cette méthode.
Dans le fichier TS du component enfant, il faut importer Input de @angular/core et l'utiliser comme ceci : @Input() nom:type;
Puis, dans le template HTML du component parent, sur le custom tag du component enfant :
<component-enfant [nom]="valeur"></component-enfant>


Structures conditionnelles :

IF : 

<h1 *ngIf = "variableBool">Test</h1>

IF / ELSE :

<div *ngIf="variableBool; then thenBlock; else elseBlock"></div>

<ng-template #thenBlock>
	<h1>Test 1</h1>
</ng-template>

<ng-template #elseBlock>
	<h1>Test 2</h1>
</ng-template>

SWITCH :

<div [ngSwitch] = "variable">
	<div *ngSwitchCase="'red'">Red</div>
	<div *ngSwitchCase="'blue'">Blue</div>
	<div *ngSwitchCase="'green'">Green</div>
	<div *ngSwitchDefault>Default</div>
</div>

BOUCLES :

<div *ngFor = "let color of colors; index as i">
	<p>{{ i }} {{ color }}</p>
</div>

=== Pipes ===

Les pipes prennent des données en INPUT, les transforment, puis les affichent en sortie dans le DOM. Elles peuvent s'enchainer à condition de respecter
l'ordre ci-dessous :


variable | async -> attendre l'arrivée des données du serveur avant d'éxecuter les autres pipes
variable | date: '' -> affiche de façon plus claire la date
variable | uppercase / lowercase / titlecase -> affiche en majuscule / minuscule / Majuscule en début de mot

=== Création d'un service ===

ng g s nomService dans Angular CLI

Un service permet l'utilisation de méthodes dans des components en leur retournant des données.
Cela sert à limiter le code et à éviter de le dupliquer inutilement.

Pour être utilisé dans une application, un service doit être injecté :

-Dans app.module.ts : si on veut que l'instance du service soit disponible dans tous les components et autres services
-Dans app.component.ts : si on veut que l'instance du service soit disponible dans tous les components mais pas les autres services
-Dans le component désiré : si on veut que l'instance du service ne soit disponible que dans le component et ses components enfants mais nul part ailleurs

Pour injecter, il faut import le service en haut du fichier ts et l'inclure dans le providers (si app.module.ts)
Dans un component, il faut le déclarer comme argument dans son constructeur en ajoutant l'import en haut du fichier.


constructor(private _nomService: NomService) { 

// pour accéder aux méthodes du service il faut utiliser this._nomService.methode();

}

et dans le ngOnInit du component : this._nomService.methode()

=== Routing ===

Le routing d'Angular permet de passer d'une vue à l'autre sans recharger la page.

ng generate module app-routing --flat --module=app
--flat : met le fichier app-routing à la racine du projet
--module=app : l'importe dans le AppModule

Mettre au sein du template HTML principal le <router-outlet></router-outlet> afin d'afficher le retour du routing à cet endroit.

Editer le fichier app-routing.module.ts pour y placer les routes.

import { NgModule }             from '@angular/core';
import { RouterModule, Routes } from '@angular/router';

const routes: Routes = [
	{ path: '', redirectTo: '/cheminParDefaut', pathMatch: 'full' },
	{ path: 'cheminDansUrl', component:nomComponent },
	{ path: 'chemin/:id', component:nomComponent }
	...
]

@NgModule({
  imports: [ RouterModule.forRoot(routes)],
  exports: [ RouterModule ]
})
export class AppRoutingModule {}

Il faut tout d'abord y importer les différents components que l'on va utiliser.
Puis ensuite définir les routes dans la constante routes.

Dans les templates, on peut y inclure des liens activant le routing avec l'attribut routerLink="path" à la place du href.

Pour récupérer les données dans l'URL, il faut inclure dans le component : 

import { ActivatedRoute } from '@angular/router';
import { Location } from '@angular/common';

et placer dans le NgOnInit : const nomVariable = +this.route.snapshot.paramMap.get('nomVariableDansUrl');


=== Http ===

Importer le module HttpClientModule dans app.module.ts (location : '@angular/common/http')
Importer HttpClient dans le service (location : '@angular/common/http')
Importer Observable dans le service (location :'rxjs/Observable')
Inclure une instance de l'objet HttpClient en paramètre dans le constructeur du service : private http: HttpClient

nomMethodeDuService(): Observable<casting> {
	this.http.<casting>get(urlFichierOuServeur) // url est de type string
}

Dans le component qui utilise le service : this._nomService.methode().subscribe(
(value) => { // on peut exploiter la value },
(error) => { // on peut exploiter l'erreur },
() => { // à la fin de la requête }
);


=== Création d'une class externe ===

Utiliser la commande ng g class nomClass pour créer le fichier de class.

L'importer dans les fichiers des components qui utilisent la classe avec : import { nomClass } from "location"; // sans le sufixe

=== Création d'une directive ===

Une directive est une classe à laquelle on applique un décorateur @Directive qui modifie le DOM.
Il y a deux sortes de directives : "
-Directives structurelles (ajoute, modifie ou supprime un élément du DOM) ex : *ngIf="", *ngFor="let x of y", *ngSwitchCase="..."
-Attribute directive (modifier l'apparence ou le comportement d'un élément existant du DOM) ex : [ngStyle]="{clef:valeur}", [ngClass]="{class:condition}"

Ajouter des listeners dans une directive :

@HostListener('event') onEvent() { }

Importer une librairie JS dans Angular :

Utiliser NPM pour installer la librairie dans le dossier du projet
Puis, dans fichier .ts du component écrire : import * as alias from 'nom-de-la-librairie';

=============================================================================

ANGULAR MATERIAL :

ng add @angular/material

Il ne reste plus qu'à inclure les modules de Material dans le fichier module.ts du projet pour pouvoir les utiliser dans chaque components.

Getting started : https://material.angular.io/guide/getting-started

Pour le date picker, penser à inclure le module MatNativeDateModule de @angular/material.




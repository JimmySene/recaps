Javascript -> JS -> Langage de script (programmation) créé en 1995 par Brendan Eich.
C'est un langage ORIENTE OBJET PAR PROTOTYPE.

- Langage interpreté par un interpreteur, généralement situé sur le navigateur web

	Interpreteurs JS : 
		-Firefox : SpiderMonkey
		-IE : Chakra / Jscript pour IE < 9
		-Chrome : V8
	
- Client-side

Sert à :
	- Dynamiser les pages web HTML
	- Faire des extensions pour les navigateurs
	- Faire des applications
	
Standard EcmaScript. Javascript en est une implémentation.

Doc : https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference

Tester le JS sur le web : JSFiddle

F12 pour utiliser le kit de développement du navigateur pour le débogage.

-----------------------------------------------------------------------------------------
					BASES
-----------------------------------------------------------------------------------------

Les ; en fin d'instruction sont recommandés mais ne sont pas obligatoires (sauf si plusieurs instructions sur même ligne).

Non sensible aux espaces et indentations.

Commentaires // et /* */

Ecrire le code JS dans des fichiers externes en .js que l'on inclut dans une balise <script></script> au sein d'une page HTML.
Utiliser l'attribut src pour intégrer le fichier js.

Ecrire le type MIME si HTML < à 5 sous la forme suivante type="text/javascript" dans la balise script.
Dans ce cas, échapper le code JS avec les balises d'encadrement pour éviter l'erreur W3C. <!--     //-->

Mettre les balises script de préférence avant la fin de la balise <body>, voir dans <head>.

---------------------------

DECLARATION DE VARIABLES : var ma_variable;
Le nom des variables ne peuvent comporter que des caractères alphanumériques, $ et _ sont autorisés. Pas de chiffre au début.
Sensible à la casse.

AFFECTATION DE VALEUR : ma_variable = valeur;

MULTIPLES DECLARATIONS : var ma_variable, ma_variable2, ma_variable3;
......... AFFECTATIONS : ma_variable = ma_variable2 = ma_variable3 = valeur;

Les variables sont TYPES DYNAMIQUEMENT, pas besoin de préciser le type et on peut stocker n'importe quoi dedans.

Trois types principaux : Number, String, Boolean.
type of permet de tester le type d'une variable. Elle renvoie undefined si variable vide ou inexistante.

Pour les string, utiliser les '' de préférence aux "". Utiliser des \ pour échapper les '' au sein d'un texte.

Opérateurs arhitmétiques : +, -, *, / et %

Possibilité d'utiliser les +=, -=, *=, /= et %=

Concaténation : +

Fonctions basiques : 
	- alert('message') : affiche un message
	- prompt('message') : affiche un message et enregistre la saisie clavier sous forme de String
	- parseInt(variable) : convertie variable en Number
	- confirm('message') : Affiche un message et demande une confirmation. Renvoie true ou false.
	- console.log('message') : Affiche un message dans la console. Pratique pour le débogage.
	- isNaN(variable) : Teste si variable n'est pas un nombre. Renvoie true ou false.
	
---------------------------
	
Opérateurs de comparaison : ==, !=, === (valeur + type), !== (valeur + type), >, >=, <, <=
Opérateurs de logique : && (ET), || (OU), ! (NON)

CONDITIONS : Tests

if(condition) { // SI
	instructions si true;
} else if(condition) { // SINON SI
	instructions si true
} else { // SINON
	instructions si false;
}

switch(variable) {
	case 1:
		instructions;
	break;
	case 2:
		instructions;
	break;
	...
	default:
		instructions;
}

ternaires : variable = condition ? valeurTrue : valeurFalse;

---------------------------

BOUCLES : Répéter X fois les même instructions

Inscrémentation : variable++ (affecte et incrémente) ou ++variable (incrémente et affecte)
Décrémentation : variable-- ou --variable

while(condition) {
	instructions à répéter si true;
	iteration;
}

On peut utiliser le "break" ou une variable de boucle à false pour sortir de la boucle.
Le "continue" met fin au tour du boucle et passe directement au tour suivant.

do {
	instructions à rep;
	iteration;
} while(condition);

for(initialisation;condition;iteration) {
	instructions à rep;
} // L'itération se fait en fin de chaque tour de boucle

Les variables faites dans les boucles sont disponibles partout !

---------------------------

FONCTIONS : éviter la répétition d'un code

En JS, on distingue la procédure de la fonction :
-Procédure : Fonction qui ne renvoie pas de valeur
-Fonction : Fonction qui renvoie une valeur

Créer : function nomFonction(arguments) {
	instructions;
}

Appeler : nomFonction(arguments);

Les variables déclarées au sein d'une fonction sont LOCALES et ne peuvent pas être utilisées en dehors.
On dit alors qu'elles se trouvent dans un SCOPE. Contrairement aux variables GLOBALES accessibles partout.

Pour faire des arguments facultatifs, il faut mettre une condition au sein de la fonction pour tester leur existence.

Utiliser "return" pour renvoyer une valeur et mettre fin à la fonction.

Fonction anonyme : var maFonction = function() { }; Utilisation maFonction();
IIFE : (function() { })(); Fonction anonyme executée directement.

---------------------------

TABLEAUX et OBJETS :

Un objet comporte 3 choses :
	- Constructeur -> code executé quand on utilise un nouvel objet	
	- Propriétés -> variables d'un objet
	- Méthodes -> fonctions d'un objet
	
TOUTES LES VARIABLES CONTIENNES DES OBJETS.

L'accès aux propriétés et méthodes se font avec le point (objet.nomPropriété ou objet.nomMethode())

Type ARRAY -> Contient plusieurs valeurs appelés "items", accessibles à partir d'indices (index) commencant à 0.

Initialisation : var my_array = [valeur1, 'valeur2', valeur3...];
Accéder à une valeur : alert(my_array[indice]); // affiche la valeur liée à l'indice renseigné

Méthodes : 
	-push() ajouter une entrée dans un array à la fin
	-unshift() .......................... au début
	-shift() retirer une entrée dans un array au début
	-pop() ................................. à la fin
	-splice(index, nbASup, ajout, ajout, ...) retire une entrée et en ajoute dans un array
	
	-split(separateur) divise un String par séparateur en plusieurs items pour ARRAY
	-join(separateur) regroupe les items d'un array en String par séparateur
	-length() récupère le nombre d'items dans un Array ou le nombre de caractères dans un String
	
Parcourir un tableau :
	for (var i = 0, c = myArray.length; i < c; i++) { 
		alert(myArray[i]);
	}
	
Déclarer objet littéral : var variable = {
	nom: valeur,
	nom2: valeur,
	nom3: valeur
}; // LES NOMS SONT DES PROPRIETES

Accéder aux valeurs d'un objet littéral :
	variable.propriété OU variable['propriété']

Ajout d'une valeur :
	variable.newPropriete = valeur; OU variable['newPropriete'] = valeur;
	
Parcourir un objet littéral : for (var i in objetLitteral) {
	alert(objetLitteral.i);
}

Déclarer un objet via constructeur : var obj = function() {
	propriete : valeur,
	methode : function() {
	}, 
	...
}

Les proprietes sont accessibles via le mot clef this au sein du constructeur. Elles pourront être accessibles ailleurs
après instanciation de l'objet. Pour rendre privé une propriété, il faut déclarer une variable au sein du constructeur
avec var.

Instancier un objet : var monObj = new monObj();
Les méthodes sont déclarées après chaque instanciation. D'où l'intérêt d'utiliser des prototypes pour ne pas surcharger 
le code.

Un prototype est un ensemble d'élément qui va être associé à un constructeur en tant que liste complémentaire.
Si une propriété ou méthode est appelée sur une instance d'objet et que celle-ci n'est pas située dans le constructeur,
alors elle sera appelée par le prototype.

Déclarer un prototype (l'objet doit avoir été déclaré au préalable) : Obj.prototype.nom = function() {
};

Il est possible de faire une extension de prototype en ajoutant des méthodes après avoir instancié des objets l'utilisant.

Appliquer une extension de prototype : obj.prototype.newMethode = function() { ... }; 

Une surcharge appliquée sur une instance d'objet consiste à modifier une méthode de cet objet en particulier.

Appliquer une surcharge : obj.methode = function() { ... };

L'héritage POO en JS se fait par extension de prototype via une boucle :

for(cle in obj.prototype)
{
	newObj.prototype[cle] = obj.prototype[cle];
}

Cela a pour effet de transmettre les méthodes et propriétés au nouvel objet.

Toutes nouvelles méthodes appliquées à l'élément parent ne sera pas copié dans le nouvel objet suite à l'extension.
C'est une limite de l'héritage en JS.
-----------------------------------------------------------------------------------------
				MANIPULATION DU DOM
-----------------------------------------------------------------------------------------

Le DOM (Document Object Model) est une API (Interface de programmation) pour les documents XML et HTML.
Il nous permet, grâce à JS, de manipuler les éléments HTML au sein d'une page WEB. La version actuelle du DOM est DOM-2.

C'est à partir de l'objet window que le JavaScript est executé. Cet objet représente la fenêtre du navigateur. La méthode alert() vient de là.
C'est un objet implicite. Il n'est pas nécessaire de le mentionner pour utiliser ses méthodes.

Toutes variables non déclarées mais dont est affecté une valeur est rattachée à l'objet windows, en GLOBAL.

La page web est représentée par l'élément html appelé "document". C'est à partir de cet élément que l'on navigue et modifie le DOM.

Les éléments sont classés de manière hiérarchique. Ils sont appelés "noeuds" (objet Node) et peuvent avoir des noeuds enfants (en dessous) et parents (au dessus).
Les noeuds sont de deux types : HTML ou Text. Un principe d'héritage des propriétés et méthodes s'appliquent dans tout le DOM.

Méthodes pour ACCEDER A DES ELEMENTS : 
	-document.getElementById('test'); -> accéder à l'élément portant l'ID test
	-document.getElementsByTagName('balise html'); -> accéder aux éléments dont la balise est renseigné ; renvoie un Array
	-document.querySelector('css'); -> Accéder à un élément via une requete CSS
	-document.querySelectorAll('css'); -> Accéder à tous les éléments via une requete CSS ; renvoie un Array

Méthodes pour ACCEDER ET MODIFIER DES ATTRIBUTS :
	-element.getAttribute('nomAttribut');
	-element.setAttribute('nomAttribut', 'valeur');

Certains attributs comme href et value sont accessibles directement avec les propriétés du même nom sur les éléments. Ex : element.href ou element.value

Pour modifier une class, il faut utiliser la propriété className. Ex : element.className = valeur;
............. un for ................................. htmlFor.

Utiliser la propriété innerHTML pour récupérer le code HTML sous forme de texte ou le modifier. (ne peut pas mettre de balises <script>)
Utiliser la propriété textContent pour récupérer ou modifier le texte. innerText pour IE < 9.

Ne pas utiliser ces propriétés dans une boucle afin de ne pas ralentir le code. Préférer la concaténation dans une variable.

Propriétés d'accès : 
	- parentNode -> atteint l'élément parent
	- firstChild / firstElementChild-> atteint le premier élément enfant / premier élément HTML
	- lastChild / lastElementChild -> atteint le dernier élément enfant / dernier élément HTML
	- childNodes -> retourne un Array des éléments enfants
	- previousSibling / previousElementSibling -> Accède à l'élément précédent / élément HTML précédent
	- nextSibling / nextElementSibling -> Accède à l'élément suivant / élément HTML suivant

Autres propriétés du DOM :
	- nodeType -> retourne un nombre précisant le type de noeud
	- nodeName -> retourne le nom du noeud (utiliser les méthodes toLowerCase() ou toUpperCase() dessus pour + de clarté)
	- nodeValue / data -> retourne le contenu d'un noeud

CREATION D'UN ELEMENT HTML : createElement('balise');
CREATION D'UN ELEMENT TEXT : createTextNode('texte');
PLACER UN ELEMENT HTML OU TEXT : appendChild(element/texte);

Toutes les propriétés et méthodes d'accès vers des éléments RETOURNENT UNE REFERENCE et non pas une simple valeur.
On ne peut pas copier un élément d'une variable dans une autre de façon normale.

CLONER UN ELEMENT : On utilise la méthode cloneNode(true/false); le boléen indique si on veut cloner les éléments enfants.
PS : Ne clone pas les évènements attachés.

REMPLACER UN ELEMENT : méthode replaceChild(élément à ajouter, élément à remplacer);

SUPPRIMER UN ELEMENT : removeChild(element);

Quelques méthodes :
	- hasChildNodes(); -> renvoie true si l'élément a des enfants
	- insertBefore(élément à insérer, élément position);-> insert un élément avant un autre élément

---------------------------

Les évènements permettent de déclencher une fonction selon qu'une action s'est produite ou non.

PRINCIPAUX EVENEMENTS : click, dblclick, mouseover, mouseout, mousedown, mouseup, mousemove, keydown, keyup, keypress, focus, blur, change, input, select, submit, reset

Les évènements se déclenchent sur un élément dès que celui-ci possède le FOCUS.

3 façons d'ajouter un évènement à un élément :
	- Sans le DOM : onévènement = fonction au sein d'une balise HTML
	- DOM-0 : définition d'une fonction anonyme dans la propriété onévènement d'un élément
	- DOM-2 : Utiliser la méthode addEventListener('évènement', fonction anonyme, true/false); sur un élément // le true signifie phase de capture et false phase de bouillonement

SUPPRIMER UN EVENEMENT : element.removeElementListener('evenement', fonction);

L'objet Event est un objet passé en paramètres aux fonctions d'évènements récupérant divers infos. Il faut le passer en argument de fonction des évènements DOM-0 ou DOM-2 pour le récupérer.

Récupérer l'élément où est situé l'évènement : e.target ou e.currentTarget
Récupérer la position du curseur de la souris : e.clientX et e.clientY
Bloquer l'action par défaut : preventDefault();

-----------------------------------------------------------------------------------------
				LA POO EN JS
-----------------------------------------------------------------------------------------

DEFINIR UN CONSTRUCTEUR : function MonObjet(argument1, argument2...) {  // On met une majuscule comme Array, String et Number.
	this.propriete1 = argument1;
	this.prorpiete2 = argument2...
	this.methode = function() {}

}

INSTANCIER UN OBJET : var truc = new MonObjet(arguments);

UTILISATION DES METHODES ET PROPRIETES : truc.propriete = valeur; / truc.methode();

TESTER SI INSTANCE D'OBJET -> instance instanceof objet : renvoie true ou false





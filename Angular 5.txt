Framework TypeScript utilisé pour crééer des SPA et raccourcir drastiquement le code JS. 
Créé en 2016. Evolution de AngularJS.

=============================================================================

Avec Angular, on peut utiliser un CLI pour générer le squelette de son application avec une simple commande.
Il faut avoir installé une version de node JS et de NPM pour pouvoir l'utiliser.

Installer Angular-cli : npm install -g @angular-cli

Créer un projet : ng new nom-projet

Se placer dans le dossier de projet et lancer le serveur en lancant la commande ng serve.
Si VM : ng serve --host 0.0.0.0 --port 4200

Accéder à l'appli grâce au navigateur à l'adresse : IP:port

Liste de commandes de création :

-component : ng g component nom-component
-directive : ng g directive nom-directive
-pipe : ng g pipe nom-pipe
-class : ng g class nom-class
-service : ng g service nom-service
-interface : ng g interface nom-interface
-enum : ng g enum nom-enum
-module : ng g module nom-module

Structure d'un projet :

Dans le dossier app, chaque component est situé dans un dossier portant son nom. Ce dossier contient 3 fichiers :
-nom.component.html -> template HTML
-nom.component.ts -> fichier TypeScript principal
-nom.component.spec.ts -> fichier pour les tests (optionnel et peut être supprimé)

Il y a un component principal du nom de app directement dans le dossier.

Lorsque le développement est fini et que l'on souhaite mettre l'application sur un serveur, il faut le compiler
avec la commande ng build et transférer sur le serveur l'ensemble des fichiers se situant dans le dossier "dist".

=============================================================================

Dans Angular, tout est COMPONENT. Un component ne gère que sa vue et ses données, a son propre cycle de vie et communique
avec d'autres components uniquement via les évènements.

Déclaration d'un component : ng g c nom-component avec angular cli

import { Component } from '@angular/core';

@Component({
	selector: 'mon-premier-component',
	template: '
		<h1>Mon premier component</h1>
		// autre code HTML
	',
	styles: ['']
})

export class MonPremierComponent {
}


Infos : @angular/core est le module coeur de Angular qui contient la classe "Component" à importer à chaque création.
@Component est un décorateur, issu du langage TypeScript. Il permet de modifier une class pour la "transformer"
en web component Angular.
Il y a trois MetaDatas : 
-"selector" est le Custom Element W3C (Balise HTML 5 perso). Il y a trois façons de l"utiliser :
	-'exemple' => créer la balise <exemple></exemple>
	-'.exemple' => Créer une class css <div class="exemple"></div>
	-[exemple] => Créer un attribut html <div exemple></div>
-"template" est l'import HTML W3C (intégation de document HTML 5). Utiliser les `` pour écrire sur plusieurs lignes. 
	Utiliser "templateUrl" à la place de "template" pour renseigner une url menant vers un fichier de template.
-styles permet d'entrer le code CSS. 
	styleUrls mentionne dans un array les fichiers CSS.

"export" pour exporter le component dans toute l'application. C'est dans cette classe où l'on peut placer le code de notre application (prorpiétés et méthodes).

Utiliser le mot clef this pour accéder aux données du component au sein des méthodes et propriétés.


Un component est en soit une class avec un décorateur @Component.

=============================================================================


Interpolation : {{ }} pour afficher des données dans un template HTML. On peut effectuer des calculs en son sein.

Property-binding : Lie des propriétés du modèle à des éléments HTML du DOM. Il est préférable d'éviter d'utiliser l'interpolation dans les attributs html car cela ne fonctionne qu'avec des string. 
Il vaut mieux mettre l'attribut html etre crochets. Ainsi il pourra être lié à une variable du modèle. Exemple : <input [disabled] = "myDisabled" /> // sachant que myDisabled est = à true ou false
Une alternative existe : bind-attribut. Exemple : <input bind-disabled = "myDisabled" /> // sachant que myDisabled est = à true ou false

[style.attributCSS] = "propriete" -> change le style d'un élément HTML du DOM. Exemple : <p [style.color] = "couleur">Test</p> // sachant que couleur est définie à "blue"
On peut mettre des conditions comme valeur. Exemple : <p [style.color] = "erreur ? red : green">Test</p> // sachant que erreur est définie à true ou false
Il est possible de définir plusieurs effets de styles en les mettant dans un objet et en utilisant la syntaxe 1 dans le template.

Evènement click (Equivalent de ng-click = "") : (click) = ""
Input Data-binding (Equivalent de ng-model = "") : [(ngModel)] = "" (penser à inclure le module forms dans app.module.ts)

Reference template variable : #nomVariable dans une balise HTML pour stocker l'élément HTML dans une variable que l'on peut ensuite exploiter dans le template ou dans le modèle en utilisant
son nom. Exemple : <input #myInput (click)="afficheValeur(myInput)" type="text" /> puis, on récupère l'élément myInput dans la méthode afficheValeur. Ce qui nous permet d'accéder à l'ensemble
de ses propriétés et méthodes.

Structures conditionnelles :

IF : 

<h1 *ngIf = "variableBool">Test</h1>

IF / ELSE :

<div *ngIf="variableBool; then thenBlock; else elseBlock"></div>

<ng-template #thenBlock>
	<h1>Test 1</h1>
</ng-template>

<ng-template #elseBlock>
	<h1>Test 2</h1>
</ng-template>

SWITCH :

<div [ngSwitch] = "variable">
	<div *ngSwitchCase="'red'">Red</div>
	<div *ngSwitchCase="'blue'">Blue</div>
	<div *ngSwitchCase="'green'">Green</div>
	<div *ngSwitchDefault>Default</div>
</div>

BOUCLES :

<div *ngFor = "let color of colors; index as i">
	<p>{{ i }} {{ color }}</p>
</div>

=== Création d'un service ===

ng g s nomService dans Angular CLI

Un service permet l'utilisation de méthodes dans des components en leur retournant des données.

Inclure l'importation dans app.module.ts et dans son providers.

Pour utiliser un service, il faut inclure une instance du service en paramètre du constructor du component : 

constructor(private _nomService: NomService) { 

}

et dans le ngOnInit : this._nomService.methode()

=== Http ===

Importer le module HttpClientModule dans app.module.ts (location : '@angular/common/http')
Importer HttpClient dans le service (location : '@angular/common/http')
Importer Observable dans le service (location :'rxjs/Observable')
Inclure une instance de l'objet HttpClient en paramètre dans le constructeur du service : private http: HttpClient

nomMethodeDuService(): Observable<casting> {
	this.http.<casting>get(urlFichierOuServeur) // url est de type string
}

Dans le component qui utilise le service : this._nomService.methode().subscribe(data => this.variable = data);


=== Création d'une class externe ===

Utiliser la commande ng g class nomClass pour créer le fichier de class.

L'importer dans les fichiers des components qui utilisent la classe avec : import { nomClass } from "location"; // sans le sufixe

=== Création d'une directive ===

Une directive est une classe à laquelle on applique un décorateur @Directive qui modifie le DOM.
Il y a deux sortes de directives : 
-Directives structurelles (ajoute, modifie ou supprime un élément du DOM) ex : *ngIf="", *ngFor="let x of y", *ngSwitchCase="...
-Attribute directive (modifier l'apparence ou le comportement d'un élément du DOM) ex : [ngStyle]="{}"

Ajouter des listeners dans une directive :

@HostListener('event') onEvent() { }




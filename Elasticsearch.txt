Elasticsearch est un moteur d'indexation et d'analyse textuelle de données opensource.
Il permet d'analyser, rechercher et stocker des gros volumes de données en très peu de temps.

NTR = Near realtime -> Le temps entre l'indexation d'un doc et sa recherche est extremement court
Cluster = Collection de nodes (servers) qui contient l'ensemble des données et fournis des fonctions d'indexation 
et de recherches. Identifiée par un nom unique. Par défaut "elasticsearch".
Node = Serveur qui stock les données, faisant parti d'un cluster. Identifiable par un nom. Par défaut rattaché au cluster "elasticsearch".
Index = Ensemble de documents ayant des caractéristiques similaires. Doit avoir un nom en minuscule. Une sorte de BDD micro service.
Type = Equivalent des tables en SQL. Catégorie appartenant à un index.
Document = Equivalent des champs en SQL. Ce sont les données. Format JSON.
Shard : Divise un index en plusieurs parties de façon arbitraire et aléatoire de manière homogène (à partir d'un hash de l'ID de l'objet). C'est un Lucene Index.
Replicas : copie des shards.

Utilise le port 9200 pour atteindre elasticsearch. : localhost:9200

 192.168.8.112

Commande pour initialiser un cluster et un node : -Ecluster.name = 'name' -Enode.name = 'name'

Fournit une puissante API Rest permettant de faire ce qu'on a besoin avec nos données et d'intéragir avec les clusters.

Voir les index : GET /_cat/indices?v
Créer un index : PUT /nomIndex

Envoyer un document : PUT /nomIndex/nomType/id

Supprimer un index : DELETE /nomIndex

Le pattern REST utilisé : RestVerb/Index/Type/ID

Supprimer un document : DELETE nomIndex/Type/id

API REST pour communiquer avec Elasticsearch -> Ecrire des URL pour obtenir des résultats

Insérer des données : 

POST /index/type
{
	DOCUMENT JSON
}

Récupérer des données :

GET /index/type/Id -> Retourne le document JSON

Supprimer des données :

DELETE /index/type/Id

Recherche de données :

POST index/type/_search
{
	"query": {
		"match_all" : { }, // SELECTIONNE TOUT
		"match" : { "title": "test" } // CLAUSE WHERE
		"query_string" : {
			"query": "Test",
			"fields": ["champs"]
		}
	}
}

EQUIVALENCES :

Index : BDD
Type = Table
PhpMyAdmin = Elastic-head accessible à _plugin/head

Utiliser la commande curl -X pour utiliser elasticsearch en ligne de commande
-d pour préciser le body
ctrl + c pour sortir d'un requete
?pretty pour afficher les résultats de façon claire

Dans le plugin HEAD :

Aller dans Navigateur -> Index pour voir les données poussées dans l'index

Index inversé = C'est à partir des valeurs qu'on retrouve les documents.

CAP : théorème qui prouve qu'il est impossible pour une base de donnée d'avoir les trois caractéristiques en même temps : partionnement, disponibilité et intégrité.*
Intégrité + disponibilité = SGBDR
Partionnement + intégrité = Elasticsearch

Sur Putty utiliser la commande bg pour mettre elasticsearch en fond et continuer à taper des commandes.

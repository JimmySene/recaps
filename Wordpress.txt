Wordpress est le CMS le plus utilisé dans le monde. Il permet une création simplifiée de blogs et de sites web.
Pas besoin de savoir programmer pour créer et gérer un site wordpress. Wordpress a été développé en PHP depuis 2003.

Le CMS Wordpress a été utilisé pour créer plus de 30% des sites web existants.
Il représente à lui seul plus de 60% des CMS utilisés au monde.

Il possède un système de plugins qui permet d'ajouter des fonctionnalités au site que l'on construit.
Que l'on peut simplement télécharger et installer via un panneau d'administration.
De même, il existe plusieurs thèmes qui ont été construits pour changer l'apparence de notre site.

Si l'on sait développer, on peut créer des plugins et des thèmes.

Accéder au pannel admin : url-du-site/wp-admin

Le dossier wp-content possède deux dossiers : Plugins et Themes. C'est dedans que l'on pourra développer.
On évite de modifier les fichiers natifs de Wordpress au risque de perdre nos modifications lors des maj.

Le moyen qui nous est fourni par Wordpress pour entreprendre des modifications en PHP est le principe des actions.
Les actions sont des fonctions appelées lorsqu'un évènement particulier survient.

Créer une action : add_action('nom_evenement', 'nom_fonction', 10); // le troisième paramètre est la priorité
Exécuter une action : do_action('nom_evenement', arguments_envoyes_aux_fonctions...);

Pour créer un thème, on créé un dossier avec le nom du theme sans espace ni accent dans le dossier wp-content/themes.
On peut aussi créer un thème enfant d'un autre qui héritera du thème parent mais que l'on pourra modifier à notre guise.

Dans un dossier de thème, deux fichiers doivent y figurer :

-style.css comportant en commentaire des indications sur le thème (seul le nom du thème est obligatoire) :
/*
Theme Name: Le thème de test
Template: nomDuDossierDuTemplateParentSiIlExiste
Author: SENE Jimmy
Author URI: http://monsiteweb.com
Description: Notre premier thème WordPress !
*/
-index.php : point d'entrée. Structure HTML du site. 

Un fichier screenshot.png pourra également être présent pour avoir une image de thème (1200*900).

On peut créer plusieurs fichiers .php dans le dossier.

Il y a un mécanisme de fallback concernant les fichiers php. index.php peut suffir pour toutes les pages du site.
Cependant, si on a besoin d'un affichage particulier pour les catégories par exemple, on pourra alors créer un fichier
category.php qui sera appelé au lieu de index. Puis aller plus loin en profondeur selon la catégorie appelée. Un peu comme un système de routing.

Un fichier functions.php peut être présent et contient des fonctions php pouvant être utilisées dans tous les fichiers du thème.
Créer un fichier functions.php dans un template enfant ne remplacera pas celui du parent, mais le complètera.

Lors de la création d'un thème enfant, le style du thème parent a complètement été anhilé. 
Pour le récupérer, il suffit d'ajouter la ligne @import url('../nomDossierThemeParent/style.css'); dans le style.css

On peut aussi surcharger les fichiers en copiant / collant des fichiers PHP que l'on souhaite modifier.
Par exemple, si on veut modifier le footer.php d'un thème parent, on le copie colle dans le dossier du thème enfant, et on le modifie.

Créer une zone de widget (dans functions.php) pouvant être éditée dans le pannel admin : 

add_action('widgets_init','test_zone');

function test_zone()
{
	register_sidebar(array(
		'id'=> '',
		'name' => '',
		'description' => '',
		'before_widget' => '',
		'after_widget' => '',
		'before_title' => '',
		'after_title' => ''
	));
}

Appeler une zone widget :

<?php dynamic_sidebar('id_zone_widget'); ?>

Appeler un widget sans zone : 

<?php the_widget('WP_Nom_Widget'); ?>

Connaitre le nom des widgets natifs : https://codex.wordpress.org/Function_Reference/the_widget

Créer une zone de menu (dans functions.php) pouvant être éditée dans le pannel admin :

add_action('init', 'zone_menu_test');

function zone_menu_test()
{
	register_nav_menu('id_menu', 'lib_menu');
}

Afficher un menu :

<?php wp_nav_menu(array('theme_location' => 'id_zone_menu')); ?>

Template tags :

Fonctions Wordpress pouvant être utilisées dans nos thèmes. 

get_header() : renvoie le haut de page
get_footer() : renvoie le pied de page
get_template_part('page.php') : inclut un template de page
bloginfo() : renvoie le titre du site
bloginfo('description') : renvoie la description du site
bloginfo('charset') : renvoie l'encodage du site
wp_title() : renvoie le titre de la page (à mettre dans la balise title)
wp_head() : inclut le style de style.css (à mettre dans la balise head)
wp_footer() : inclut les scripts en bas de page (à mettre dans la balise body à la fin)
get_template_directory_uri() : donne la racine du theme
language_attributes() : à mettre dans la balise html en tant qu'attribut pour définir la langue définie par WP
previous_post_link() : affiche un lien vers l'article précédent
next_post_link() : affiche un lien vers l'article suivant
single_cat_title('', true) : affiche le nom de la catégorie sur laquelle on est situé
single_tag_title('', true) : affiche le nom du tag sur lequel on est situé

https://codex.wordpress.org/Template_Tags

---

Conditional tags : (renvoie true ou false en fonction de la page où on est situé)

is_home() // Page principale du blog
is_front_page() // Page principale (statique) du site
is_category() // Catégorie
is_tag() // Tag
is_single // Post
is_single(x) // Page d'un post portant l'ID x
is_single('x') // Page d'un post portant le nom ou le slug x
is_page() // Page
is_page(x) // Page portant l'ID x
is_page('x') // Page portant le nom ou le slug x
is_singular() // Post Page ou Post Type
is_singular('x') // Post type de nom ou de slug x
is_admin // Page d'administration
is_sticky // Post épinglé sur la home page

https://codex.wordpress.org/Conditional_Tags

---

Boucle de rendu :

while(have_posts()) :
	the_post(); // récupère l'article
	the_title(); // affiche le titre de l'article
	the_content(); // afiche le contenu entier de l'article
	the_excerpt(); // affiche le début du contenu de l'article et un read more si il y en a un
	the_permalink(); // génère le lien menant vers l'article (à mettre dans le href)
	get_the_date(); // Récupère la date de l'article
	the_category(', '); // Récupère la ou les catégories et les sépare par le séparateur en argument de la fonction
	the_tags(''); // Récupère les tags

	comments_template(); // inclut le fichier comments.php devant contenir <?php wp_list_comments(); ?>
	comment_form(); // affiche un formulaire d'ajout de commentaire

	$post->ID;// récupère l'ID de l'article
	$id_thumb = get_post_thumbnail_id($post->ID); // Récupère l'ID de la vignette de l'article
	wp_get_attachment_image_src($id_thumb, 'small/medium/large/thumbnail'); // Récupère l'url du média selon l'ID donné
endwhile;

La boucle de rendu se fait sur une instance de la classe WP_Query. Par défaut, un objet $wp_query est créé et c'est sur cette instance que l'on
effectue la boucle avec la méthode have_posts(). On aurait donc pu mettre while($wp_query->have_posts()) { $wpquery->the_post(); ... }

Pour faire une boucle de rendu personnalisée, il faut créer sa propre instance de la classe WP_Query. 
$exemple = new WP_Query($args);
$args = array(
	'post_type' => 'page',
	'posts_per_page' => 5,
	...
);

puis utiliser while($exemple->have_posts) { $exemple->the_post(); ... }

A l'intérieur de la boucle de rendu, une variable global $post est créée permettant de récupérer les données de l'article, la page ou autre élément
en utilisant ses propriétés ou des templates tags (fonctions dédiées). 
$post->ID ou the_ID()
$post->title ou the_title()...

Il est plus pratique et courant d'utiliser les templates tags au lieu des propriétés de $post car les méthodes permettent de placer
des balises avant et après le résultat ainsi que d'autres traitements qui peuvent se montrer utile.

https://developer.wordpress.org/reference/classes/wp_query/

---

Custom post type :

Les articles et les pages sont des post type créés par défaut dans Wordpress. Mais il est possible d'en créer de nouveaux. On les appelle les
Custom post type. On pourra ensuite les exploiter avec la boucle de rendu.

function my_function() {

$args = array(
	'public' => true,
	'label' => 'nomApparaissantDansLeMenuAdmin'
);
registrer_post_type('name', $args); }

add_action('init', 'my_function');

https://codex.wordpress.org/Function_Reference/register_post_type
https://blog.templatetoaster.com/wordpress-custom-post-type-plugins/

---

Pour inclure le design du style.css dans le template, ainsi qu'un fichier JS, il faut penser à ajouter ces lignes dans functions.php :

function prefix_load()
{
    wp_enqueue_style('prefix_style', get_template_directory_uri().'/style.css', array(), '1.0.0', 'all');
    wp_enqueue_script('prefix_script', get_template_directory_uri().'/script.js', array(), '1.0.0', true);
}

add_action('wp_enqueue_scripts','prefix_load');

https://developer.wordpress.org/themes/basics/template-hierarchy/